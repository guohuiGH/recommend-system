#define  _CRT_SECURE_NO_WARNINGS
#include<iostream>
#include<fstream>
#include<string>
#include<vector>
#include<map>
#include<time.h>
#include<math.h>
#include<algorithm>
#include<sstream>
using namespace std;

double cuv[10003][10003];
double similarity[10003][10003];

const int NEWS_SIZE = 6183;
const int USER_SIZE  = 10002;
const int DATA_SIZE = 116225;
const int RECOMMEND_SIZE = 2;
const int RECOMMEND_USER = 80;
vector<int> ve[NEWS_SIZE];
double ranks[NEWS_SIZE];
double tempSimilarity[USER_SIZE];
int recordUser[USER_SIZE];


bool isin (int u, int n) {
	int size = ve[n].size();
	for (int i = 0; i < size; i++) {
		if (u == ve[n][i])
			return true;
	}
	return false;
}

bool isCandidate(int u) {
	for (int i = 0; i < RECOMMEND_USER; i++) {
		if (recordUser[i] == u)
			return true;
	}
	return false;
}

int cmp (int a, int b) {
	return ranks[a] > ranks[b] ? true : false;
}

bool cmp2 (int a, int b) {
	return tempSimilarity[a] > tempSimilarity[b] ? true : false;
}


int main () {

		//freopen("train_data.txt","r", stdin);
	/*
		ifstream fin("data.txt");
		freopen("title","w", stdout);
		string line;
		while (getline (fin, line)) {
			istringstream sin(line);
			vector<string> fileds;
			string filed;
			int i = 0; 
			while (getline(sin, filed, '\t')) {
				if (i != 1)
					cout << filed << "\t";
				else
					break;
				i++;
			}
			cout << endl;
		}
		
		int length = 116225;
		*/

	// get title
	freopen ("title", "r", stdin);
	map<string,int> mapNews;
	map<int, string> reMapNews;
	for (int i = 0; i < NEWS_SIZE; i++) {
		string news;
		cin >> news;
		mapNews[news] = i;
		reMapNews[i] = news;

	}

	// get data
	freopen ("data.csv","r", stdin);
	map<string, int> mapName;
	map<int, string> reMapName;
	int count = 1;
	for (int i = 0; i < DATA_SIZE; i++) {
		string str1, str2;
		cin >> str1 >> str2;
		int index = mapNews[str2];
		if (mapName[str1] == 0) {
			mapName[str1] = count;
			reMapName[count] = str1;
			count++;
		}
		ve[index].push_back(mapName[str1]);
	}

	// user_news table
	int user[USER_SIZE + 1];
	memset (cuv, 0, sizeof(cuv));
	memset (user, 0, sizeof(user));
	for (int i = 0; i < NEWS_SIZE; i++) {
		int size = ve[i].size();
		for (int j = 0; j < size; j++) {
			int u = ve[i][j];
			user[u]++;
			for (int k = j + 1; k < size; k++) {
				int v = ve[i][k];
				if (u == v)
					continue;
				//cuv[u][v] += 1/(log(double (1+size)));
				cuv[u][v]++;
				cuv[v][u] = cuv[u][v];
			}
		}
	}

	// get similarity
	int length = USER_SIZE + 1;
	memset (similarity, 0, sizeof(similarity));
	for (int i = 1; i < length; i++) {
		for (int j = i + 1; j < length; j++) {
			similarity[i][j] = cuv[i][j] / sqrt(double(user[i]*user[j]));
			similarity[j][i] = similarity[i][j];
		}
	}

	// recommend
	double start = clock();
	freopen("result.csv","w", stdout);
	for (int i = 1; i < length; i++) {
		//printf("%d\n",i);
		memset(ranks, 0.0, sizeof (ranks));
		memset (tempSimilarity, 0, sizeof(tempSimilarity));
		memset (recordUser, 0, sizeof(recordUser));

		for (int j = 1; j < USER_SIZE; j++) {
			tempSimilarity[j] = similarity[i][j];
			recordUser[j] = j;
		}
		sort (recordUser, recordUser + USER_SIZE, cmp2);

			
		for (int j = 0; j < NEWS_SIZE; j++) {
			if (isin(i,j))
				continue;
			else {
				int size = ve[j].size();
				for (int k = 0; k < size; k++) {
					int u = ve[j][k];
					if (isCandidate(u))
						ranks[j] += similarity[i][u]; 
				}
			}
		}
		
		int index[NEWS_SIZE];
		for (int j = 0; j < NEWS_SIZE; j++) {
			index[j] = j;
		}
		sort (index, index + NEWS_SIZE, cmp);

		// output

		string name = reMapName[i];
		if (name == "")
			break;
		for (int j = 0; j < RECOMMEND_SIZE; j++) {
			cout << name << "," << reMapNews[index[j]] << endl;
		}
	}
//	double end = clock();

}
