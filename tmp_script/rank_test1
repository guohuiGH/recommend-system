#define _CRT_SECURE_NO_WARNINGS
#include<iostream>
#include<fstream>
#include<map>
#include<vector>
#include<string>
#include<string.h>
#include<algorithm>
using namespace std;

const int TEST_SIZE = 92;
const int BOOK_NUMBER = 3132956;
const int BOOK_CATEGORY = 39;
const string CONTENT = "D:\\DTLDownLoads\\data\\成绩排名预测\\";
const int TERM_TWO_START = 224;
const int TERM_TWO_END = 712;
const int EFFECTIVE_NUMBER = 100;
const int ITERATIVE_TIMES = 3;
const double APHA_RATIO = 0.9;
//const double APHA_RATIO_ERROR = 0.000032;
const double APHA_RATIO_ERROR = 0.0015;
const double BETLA_RATIO = 0.9;
//const double BETLA_RATIO_ERROR = 0.00002;
const double BETLA_RATIO_ERROR = 0.0015;


double initialScore[TEST_SIZE];
int trainScore[TEST_SIZE];
int validationScore[TEST_SIZE];
int bookCategory[BOOK_NUMBER];
int index[BOOK_CATEGORY];
int counter[BOOK_CATEGORY] = {0};
int pro_book_detail_counter[TEST_SIZE][EFFECTIVE_NUMBER] = {0};
double tempScore[TEST_SIZE];
double apha[TEST_SIZE] = {0.};
double betla[TEST_SIZE][EFFECTIVE_NUMBER] = {0.};
string content_test_analysis = CONTENT + "test\\analysis.txt";
fstream foutf(content_test_analysis, ios::out);

map<int, string> mapping;
map<string, int> proBookMapping;

void PreMapping(){
	proBookMapping["B"] = 3;
	proBookMapping["C"] = 1;
	proBookMapping["D"] = 1;
	proBookMapping["F"] = 1;
	proBookMapping["H"] = 3;
	proBookMapping["I"] = 2;
	proBookMapping["J"] = 2;
	proBookMapping["K"] = 2;
	proBookMapping["TP"] = 3;
}

void InitialData () {
	PreMapping();
	for (int i = 0; i < TEST_SIZE; i++) {
		apha[i] = 0.06;
		for (int j = 1; j < EFFECTIVE_NUMBER; j++) {
			if (j == 2) {
				betla[i][j] = -0.2;
				continue;
			}
			if (j == 3) {
				betla[i][j] = 0.1;
				continue;
			}
			betla[i][j] = 0.2;
		}
	}
}

void InputScore () {
	string content_train_score = CONTENT + "测试\\成绩.txt";
	fstream fin(content_train_score, ios::in);
	//freopen ("D:\\DTLDownLoads\\data\\成绩排名预测\\训练\\result.csv", "w", stdout);
	
	string t,i,re;
	fin >> t >> i >> re;
	int term, id, so;
	while (fin >> term) {
		
		fin >> id >> so;
		if (term == 2) {
			initialScore[id] = so;
		}else if (term == 3) {
			trainScore[id] = so;
		}else
			validationScore[id] = so;
	}
	fin.close();
}





int ReCaculateDate(int date) {
	int result = 0;
	return result = (date- TERM_TWO_START+100)/100;
}

void LibraryTimes () {
	string content_train_library = CONTENT + "测试\\图书馆门禁.txt";
	string content_train_sort_library_time = CONTENT + "test\\library_time_second.txt";
	string content_train_library_times = CONTENT + "test\\library_time.txt";
	fstream fin(content_train_library, ios::in);
	fstream fout(content_train_sort_library_time, ios::out);
	fstream fout2(content_train_library_times, ios::out);

	//vector<int> ve[TEST_SIZE];
	int ve[TEST_SIZE] = {0};
	string l_t;
	string l_i;
	string l_d;
	string l_ti;
	fin >> l_t >> l_i >> l_d >> l_ti;
	
	int term, id, date, time;
	int min = 10000;
	int max = 0;
	while (fin >> term) {

		fin >> id >> date >> time;
		if (term == 2) {
			ve[id] += ReCaculateDate(date);
		}
	}
	
	int total = 0;
	for (int i = 1; i < TEST_SIZE; i++) {
		double s = (double)ve[i] /10;
		fout2 << i << "\t" << s << endl;
		
	}

	fin.close();
	fout.close();
	int average = total/(TEST_SIZE-1);
	fout2 << "0\t" << average << endl;
	fout2.close();
}


void GetProNumber () {
	string content_train_borrow_book = CONTENT + "测试\\借书.txt";
	//freopen(content_train_borrow_book.c_str(), "r", stdin);
	string content_train_pro_book_number = CONTENT + "test\\pro_book_number.txt";
	fstream fin(content_train_borrow_book, ios::in);
	fstream fout(content_train_pro_book_number, ios::out);
	string t;
	string i_d;
	string b_i;
	string t_i;
	fin >> t >> i_d >> b_i >> t_i;

	int pro_book_counter[TEST_SIZE] = {0};
	
	int term, id, book_id, time;
	while (fin >> term) {
		fin >> id >> book_id >> time;
		if (term == 2) {
			string s = mapping[bookCategory[book_id]];
			pro_book_counter[id]++;
			int t = proBookMapping[s];
			if ( t > 0 )
				pro_book_detail_counter[id][t]++;
				
		}
	}

	int total = 0;
	for (int i = 1; i < TEST_SIZE; i++) {
		fout << i << "\t" << pro_book_counter[i] << endl;
		total +=  pro_book_counter[i];
	}
	cout << (double)total/TEST_SIZE << endl;
}

bool cmp3(int a, int b) {
	return tempScore[a] < tempScore[b];
}


void train () {
	
	double tempTimes[TEST_SIZE];
	string content_train_library_times = CONTENT + "test\\library_time.txt";
	fstream fin1(content_train_library_times, ios::in);
	int id; double times;
	while (fin1 >> id) {
		fin1 >> times;
		tempTimes[id] = times;
	}
	fin1.close();

	
	int tempPredict[TEST_SIZE];
	tempPredict[0] = 0;
	tempScore[0] = TEST_SIZE + 1000000;
	string content_train_result = CONTENT + "test\\result.csv";
	fstream fout(content_train_result, ios::out);

	for (int i = 1; i < TEST_SIZE; i++) {

		double sum = 0.;
		for (int j = 1; j < EFFECTIVE_NUMBER; j++) {
			sum += betla[i][j]*pro_book_detail_counter[i][j];
		}
		tempScore[i] = initialScore[i]- apha[i]*tempTimes[i]*initialScore[i]/TEST_SIZE - sum;
		tempPredict[i] = i;
		

	}

	sort(tempPredict, tempPredict + TEST_SIZE, cmp3);

	int predict[TEST_SIZE];
	for (int i = 1; i < TEST_SIZE; i++) {
		predict[tempPredict[i-1]] = i;
	}

	double result = 0.;
	double sum = 0.;
	fout << "id,rank" << endl;
	for (int i = 1; i < TEST_SIZE; i++) {
	
		fout << i << "," <<predict[i] << endl;
	}
	fout.close();
	
}

void Test() {
	InitialData();
	InputScore();
	GetProNumber();
	LibraryTimes(); 
	
	string content_conficient = CONTENT + "test\\conficient.txt";
	fstream fin(content_conficient, ios::in);
	for (int i = 1; i < TEST_SIZE; i++)
	{
		fin >> apha[i] >> betla[i][1] >> betla[i][2] >> betla[i][3];
	}

	fin.close();
	
	train();
	foutf.close();

	
}
int main () {
	Test();
	

}
